#!/bin/sh

usage() {
    cat << EOF
Usage:  herodot waybar get weather|moon|dice|idle|fan|performance|microphone|speaker|bluetooth|wifi
        herodot waybar set state off|on|toggle 
        herodot waybar run picker|ashot
EOF
}

PROCESS="waybar"

is_process_running() {
    pgrep "$1" > /dev/null 2>&1
    return $?
}

jsonify() {
    printf "{\"class\":\"%s\",\"alt\":\"%s\",\"text\":\"%s\",\"tooltip\":\"%s\"}" "$1" "$2" "$3" "$4"
}

get_battery() {
    local class
    local text
    local tooltip

    local level="$(herodot battery get level)"
    local state="$(herodot battery get state)"
    local left="$(herodot battery get left)"

    if [ "$level" -ne 100 ]; then
        class="${state,,}"
        text="$level"

        [ "$text" -le 20 ] && [ "$text" -gt 10 ] && class+="-warning" 
        [ "$text" -le 10 ] && class+="-critical" 

        text=" $text%"
        [ "$class" = "charging" ] && text=""

        tooltip="$level%\r${state^}, $left"

        jsonify "$class" "$class" "$text" "$level%\r${state^}, $left"
    fi
}

get_weather() {
    curl 'wttr.in/{Moscow}?format=%t'
}

get_moon() {
    curl 'wttr.in/{Moscow}?format=%m'
}

get_keymap() {
    local class
    local text
    local tooltip

    local mode="$(herodot keymap get mode)"

    text="$mode"
    tooltip="$mode"

    case "$mode" in
        *English*)
            class="en"
            ;;
        *Russian*)
            class="ru"
            ;;
        *)
            class="unknown"
            ;;
    esac

    jsonify "$class" "$class" "$text" "$tooltip"
}

get_dice() {
    local result="$(herodot dice get random)"
    jsonify "$result" "$result" "$result" "$result"
}

get_keyboard() {
    local class
    local text
    local tooltip

    local state="$(herodot keyboard get brightness)"

    text="Keyboard Brightness"

    case "$state" in
        "1")
            class="low"
            text+=" Low"
            ;;
        "2")
            class="medium"
            text+=" Medium"
            ;;
        "3")
            class="high"
            text+=" Hight"
            ;;
        *)
            class="off"
            text+=" Off"
            ;;
    esac

    alt="$class"
    tooltip="$text"

    jsonify "$class" "$alt" "$text" "$tooltip"
}

get_sunset() {
    local class
    local text
    local tooltip
    
    local state="$(herodot sunset get state)"

    text="Sunset"

    if [ "$state" -eq 1 ]; then
        class="on"
        text+=" Enabled"
    else
        class="off"
        text+=" Disabled"
    fi

    alt="$class"
    tooltip="$text"

    jsonify "$class" "$alt" "$text" "$tooltip"
}

get_idle() {
    local class
    local text
    local tooltip

    local state="$(herodot idle get state)"

    text="Idle"

    if [ "$state" -eq 1 ]; then
        class="on"
        text+=" Enabled"
    else
        class="off"
        text+=" Disabled"
    fi

    alt="$class"
    tooltip="$text"

    jsonify "$class" "$alt" "$text" "$tooltip"
}

get_fan() {
    local class
    local text
    local tooltip

    local state="$(herodot fan get state)"

    text="Fan"

    case $state in
        "Auto")
            class="auto"
            text+=" Auto"
            ;;
        "Maximum")
            class="maximum"
            text+=" Maximum Speed"
            ;;
    esac

    alt="$class"
    tooltip="$text"

    jsonify "$class" "$alt" "$text" "$tooltip"
}

get_performance() {
    local class
    local text
    local tooltip

    local mode="$(herodot performance get mode)"

    case $mode in
        "Performance")
            class="performance"
            text="Performance"
            ;;
        "Balance Performance")
            class="balance-performance"
            text="Balance Performance"
            ;;
        "Balance Power")
            class="balance-power"
            text="Balance Power"
            ;;
        "Power")
            class="power"
            text="Power"
            ;;
    esac

    alt="$class"
    tooltip="$text"

    jsonify "$class" "$alt" "$text" "$tooltip"
}

get_microphone() {
    local class
    local text
    local tooltip

    local device
    local volume
    local sample_rate
    local buffer_size
    local latency

    device="$(herodot audio microphone get name)"
    volume="$(herodot audio microphone get level)"
    sample_rate="$(herodot audio microphone get samplerate)Hz"
    buffer_size="$(herodot audio microphone get buffersize)"
    latency="$(herodot audio microphone get latency)ms"

    if [ "$device" = "Dummy Output" ]; then
        class="off"
        text="Not Exist"
    else
        text="$device "

        case "$volume" in
            "Muted")
                class="muted"
                text+="Muted"
                ;;
            0)
                class="zero"
                text+="$volume%"
                ;;
            [1-9]|[1][0-9])
                class="low"
                text+="$volume%"
                ;;
            [2-7][0-9]) 
                class="medium"
                text+="$volume%"
                ;;
            [8-9][0-9]|100) 
                class="high"
                text+="$volume%"
                ;;
            *)
                class="critical"
                text+="$volume%"
                ;;
        esac

        text+="\r$sample_rate $buffer_size $latency"
    fi

    alt="$class"
    tooltip="$text"

    jsonify "$class" "$alt" "$text" "$tooltip"
}

get_speaker() {
    local class
    local text
    local tooltip

    local device
    local volume
    local sample_rate
    local buffer_size
    local latency

    device="$(herodot audio speaker get name)"
    volume="$(herodot audio speaker get level)"
    sample_rate="$(herodot audio speaker get samplerate)Hz"
    buffer_size="$(herodot audio speaker get buffersize)"
    latency="$(herodot audio speaker get latency)ms"

    if [ "$device" = "Dummy Output" ]; then
        class="off"
        text="Not Exist"
    else
        text="$device "

        case "$volume" in
            "Muted")
                class="muted"
                text+="Muted"
                ;;
            0)
                class="zero"
                text+="$volume%"
                ;;
            [1-9]|[1][0-9])
                class="low"
                text+="$volume%"
                ;;
            [2-7][0-9]) 
                class="medium"
                text+="$volume%"
                ;;
            [8-9][0-9]|100) 
                class="high"
                text+="$volume%"
                ;;
            *)
                class="critical"
                text+="$volume%"
                ;;
        esac

        text+="\r$sample_rate $buffer_size $latency"
    fi

    alt="$class"
    tooltip="$text"

    jsonify "$class" "$alt" "$text" "$tooltip"
}

get_bluetooth() {
    local class
    local alt
    local text
    local tooltip

    local state="$(herodot bluetooth get state)"
    local discoverable="$(herodot bluetooth get discoverable)"
    local scan="$(herodot bluetooth get scanning)"
    local pairable="$(herodot bluetooth get pairable)"
    local devices="$(herodot bluetooth get devices)"

    local paired="$(echo "$devices" | jq -R -s -c 'split("\n") | map(select(length > 0))' | jq -r ". | join(\"\\r\")")"

    text="Bluetooth"

    if [ "$state" -eq 1 ]; then
        class="on"
        text+="On"

        [ "$discoverable" -eq 1 ] && { class+="-discoverable"; text+="\rDiscoverable"; }
        [ "$scan" -eq 1 ] && { class+="-scan"; text+="\rScan..."; }
        [ -n "$paired" ] && { class+="-paired"; text+="\rPaired with:\r$paired"; } || { text+="\rNot paired"; }

    else
        class="off"
        text+="Off"
    fi

    alt="$class"
    tooltip="$text"

    jsonify "$class" "$alt" "$text" "$tooltip"
}

get_wifi() {
    local class
    local alt
    local text
    local tooltip

    local state="$(herodot wifi get state)"
    local connected="$(herodot wifi get connected)"
    local network="$(herodot wifi get network)"
    local ip4="$(herodot wifi get ip4)"
    local rssi="$(herodot wifi get rssi)"
    local tx="$(herodot wifi get tx)"
    local rx="$(herodot wifi get rx)"

    text="WiFi"

    if [ "$state" -eq 1 ]; then
        text+="On"

        if [ "$connected" -eq 1 ]; then
            class+="on-connected"
            text+="\r$network"
            text+="\r$ip4"
            text+="\r$rssi dBm"
            text+="\rtx $tx Kbps"
            text+="\rrx $rx Kbps"

            case "$rssi" in
                [0-9]|[1-6][0-9])
                    ;;
                [7][0-9])
                    class+="-good"
                    ;;
                [8-9][0-9]) 
                    class+="-fair"
                    ;;
                [1-9][0-9][0-9])
                    class+="-poor"
                    ;;
                *)
                    class+="-unknown"
                    ;;
            esac
        else
            class+="on-disconnected"
            text+="\rDisconnected"
        fi
    else
        class="off"
        text+="Off"
    fi

    alt="$class"
    tooltip="$text"

    jsonify "$class" "$alt" "$text" "$tooltip"
}

run_picker() {
    hyprpicker --autocopy && waynot send "Color" "$(wl-paste) has been copied to the clipboard" || exit 1
}

run_ashot() {
    ashot area && waynot send "Screenshot" "has been copied to the clipboard" || exit 1
}


off() {
    dunstctl set-paused false
    killall "$PROCESS"
}

on() {
    dunstctl set-paused true
    "$PROCESS"
}

toggle() {
    is_process_running "$PROCESS" && off || on
}

case "$1" in
    "get")
        case "$2" in
            "battery")
                get_battery
                ;;
            "weather")
                get_weather
                ;;
            "moon")
                get_moon
                ;;
            "keymap")
                get_keymap
                ;;
            "dice")
                get_dice
                ;;
            "keyboard")
                get_keyboard
                ;;
            "sunset")
                get_sunset
                ;;
            "idle")
                get_idle
                ;;
            "fan")
                get_fan
                ;;
            "performance")
                get_performance
                ;;
            "microphone")
                get_microphone
                ;;
            "speaker")
                get_speaker
                ;;
            "bluetooth")
                get_bluetooth
                ;;
            "wifi")
                get_wifi
                ;;
        esac
        ;;
    "set")
        case "$2" in
            "state")
                case "$3" in
                    "off")
                        off
                        ;;
                    "on")
                        on
                        ;;
                    "toggle")
                        toggle
                        ;;
                    *)
                        usage
                        ;;
                esac
                ;;
            *)
                usage
                ;;
        esac
        ;;
    "run")
        case "$2" in
            "picker")
                run_picker
                ;;
            "ashot")
                run_ashot
                ;;
            *)
                usage
                ;;
        esac
        ;;
    *)
        usage
        ;;
esac
