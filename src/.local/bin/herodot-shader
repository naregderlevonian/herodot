#!/bin/sh

usage() {
    cat << EOF
Usage:  herodot shader get state|mode
        herodot shader set state off|on|toggle [save] 
        herodot shader set mode back|next [save]
        herodot shader set mode {shader} [save]
        herodot shader set restore
EOF
    exit 1
}

SHADERS_PATH="$HOME/.config/hypr/shaders"
SHADERS=($(ls "$SHADERS_PATH" | grep -v "current" | sort))

check_shader_exists() {
    local shader="$1"
    if [ ! -f "$SHADERS_PATH/$shader" ]; then
        echo "Paper [$shader] not found."
        exit 1
    fi
}

is_enabled() {
    hyprctl getoption "decoration:screen_shader" | grep -q "set: true" && return 1 || return 0
}

restore() {
    [ "$(load_state)" = "false" ] && { off; exit 0; }
    set_mode "$(load_mode)"
}

load_state() {
    herodot settings read "shader.isEnabled"
}

load_mode() {
    herodot settings read "shader.mode"
}

save_state() {
    local state="$1"
    herodot settings assign "shader.isEnabled" "$state"
}

save_mode() {
    local shader="$1"
    herodot settings assign "shader.mode" "$shader"
}

get_state() {
    is_enabled
    [ $? -eq 1 ] && echo "true" || echo "false"
}

get_mode() {
    local path=$(hyprctl getoption "decoration:screen_shader" | grep "str: " | awk -F ":" "{print \$2}" | xargs)
    echo "$(basename "$path")"
}

set_mode() {
    local shader="$1"

    check_shader_exists "$shader"

    waynot send "Shader" "set to $shader"
    hyprctl keyword "decoration:screen_shader" "$SHADERS_PATH/$shader"

    [ "$SAVE" -eq 1 ] && {
        save_state "true"
        save_mode "$shader";
    }
}

off() {
    waynot send "Shader turned off"
    hyprctl reload

    [ "$SAVE" -eq 1 ] && {
        save_state "false"
    }
}

on() {
    set_mode "$(load_mode)"
}

toggle() {
    is_enabled
    [ $? -eq 1 ]  && off || on
}

navigate() {
    local offset=$1

    for i in "${!SHADERS[@]}"; do
        if [ "${SHADERS[$i]}" = "$(get_mode)" ]; then
            set_mode "${SHADERS[$(( (i + offset + ${#SHADERS[@]}) % ${#SHADERS[@]} ))]}"
            return
        fi
    done
}

back() {
    is_enabled
    [ $? -eq 1 ] && navigate "-1"
}

next() {
    is_enabled
    [ $? -eq 1 ] && navigate "+1"
}

SAVE=0
[ "$4" = "save" ] && SAVE=1

case "$1" in
    "get")
        case "$2" in
            "state")
                get_state
                ;;
            "mode")
                get_mode
                ;;
            *)
                usage
                ;;
        esac
        ;;
    "set")
        case "$2" in
            "state")
                case "$3" in
                    "off")
                        off
                        ;;
                    "on")
                        on
                        ;;
                    "toggle")
                        toggle
                        ;;
                    *)      
                        usage
                        ;;
                esac
                ;;
            "mode")
                case "$3" in
                    "back")
                        back
                        ;;
                    "next")
                        next
                        ;;
                    *)
                        set_mode "$3"
                        ;;
                esac
                ;;
            "restore")
                restore
                ;;
            *)      
                usage
                ;;
        esac
        ;;
    *)
        usage
        ;;
esac
