#!/bin/sh

usage() {
    cat << EOF
Usage:  herodot audio speaker|microphone get name|samplerate|buffersize|latency|level
        herodot audio speaker|microphone set state off|on|toggle
        herodot audio speaker|microphone set level increase|decrease|up|down|max|min
EOF
    exit 1
}

TYPE="$1"
MIC_LED="platform::micmute"

SPEAKER_DEVICE="@DEFAULT_AUDIO_SINK@"
MICROPHONE_DEVICE="@DEFAULT_AUDIO_SOURCE@"
DEVICE="$SPEAKER_DEVICE"

notify() {
    waynot send "${TYPE^}" "level $(get_level "$DEVICE")"
}

set_microphone_led() {
    brightnessctl --device="$MIC_LED" set "$1"
}

extract_value() {
    echo "$(wpctl inspect "$DEVICE")"  |  grep "$1" | awk -F " = " "{print \$2}" | tr -d "\""
}

get_name() {
    extract_value "node.description"
}

get_samplerate() {
    extract_value "node.max-latency" | awk -F "/" "{print \$2}"
}

get_buffersize() {
    extract_value "api.alsa.period-size"
}

get_latency() {
    local samplerate="$(get_samplerate)"
    local buffersize="$(get_buffersize)"

    if [ -z "$buffersize" ] || [ -z "$samplerate" ]; then 
        echo ""
    else
        echo "scale=5; $buffersize / $samplerate * 1000" | bc | awk "{print int(\$1)}"
    fi
}

get_level() {
    local volume=$(wpctl get-volume "$DEVICE" | awk -F ": " "{print \$2}")

    if echo "$volume" | grep -qi "muted"; then
        printf "Muted"
    else
        printf "%.2f\n" "$(echo "$volume * 100" | bc -l)" | sed "s/\.00$//"
    fi
}

set_level() {
    wpctl set-volume "$DEVICE" $@
    notify
}

change() {
    [ "$DEVICE" = "@DEFAULT_AUDIO_SOURCE@" ] && set_microphone_led "$1"
    wpctl set-mute "$DEVICE" toggle "$1"
    notify
}

off() {
    change 0 
}

on() {
    change 1 
}

toggle() {  
    [ "$(get_level)" = "Muted" ] && on || off
}

case "$1" in
    "speaker")
        ;;
    "microphone")
        DEVICE="$MICROPHONE_DEVICE"
        ;;
    *)
        usage
        ;;
esac

case "$2" in
    "get")
        case "$3" in
            "name")
                get_name 
                ;;
            "samplerate")
                get_samplerate 
                ;;
            "buffersize")
                get_buffersize 
                ;;
            "latency")
                get_latency 
                ;;
            "level")
                get_level 
                ;;
            *)
                usage
                ;;
        esac
        ;;
    "set")
        case "$3" in
            "state")
                case "$4" in
                    "off")
                        off
                        ;;
                    "on")
                        on
                        ;;
                    "toggle")
                        toggle 
                        ;;
                    *)
                        usage
                        ;;
                esac
                ;;
            "level")
                case "$4" in
                    "increase")
                        set_level "5%+"
                        ;;
                    "decrease")
                        set_level "5%-"
                        ;;
                    "up")
                        set_level "1%+"
                        ;;
                    "down")
                        set_level "1%-"
                        ;;
                    "max")
                        set_level "100%"
                        ;;
                    "min")
                        set_level "0%"
                        ;;
                    *)
                        usage
                        ;;
                esac
                ;;
            *)
                usage
                ;;
        esac        ;;
    *)
        usage
        ;;
esac

