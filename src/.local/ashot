#!/bin/sh

source "$HOME/.config/ashot/config"

usage() {
    cat << EOF
Usage:  ashot all|workspace|client|area [file]

        ashot custom {options}
        ashot custom -h
EOF
    exit 1
}

DESTINATION="$SCREENSHOT_DIR/$SCREENSHOT_MASK"
EXTRA="- | wl-copy"

SLURP_BACKGROUND_COLOR="#08080894"
SLURP_SELECTION_COLOR="#00000000"

get_area() {
    slurp \
        -b "$SLURP_BACKGROUND_COLOR" \
        -s "$SLURP_SELECTION_COLOR" \
        -w 0 \
        || exit 1
}

get_workspace() {
    hyprctl activeworkspace -j | jq -r '.monitor' | tr -d ' ' \
        || exit 1
}

get_client() {
    hyprctl activewindow -j | jq -r '"\(.at[0]),\(.at[1]) \(.size[0])x\(.size[1])"' \
        || exit 1
}

construct() {
    local arguments="$1"
    local extra="$2"
    local scale="-s $SCREENSHOT_SCALE"
    local format="-t $SCREENSHOT_FORMAT"
    local compression="-l $SCREENSHOT_COMPRESSION"
    local quality="$([ "$SCREENSHOT_FORMAT" = "jpeg" ] && echo "-q $SCREENSHOT_QUALITY")"
    local cursors="$([ "$SCREENSHOT_CURSORS" = true ] && echo "-c")"

    echo "grim $scale $format $compression $quality $cursors $arguments $extra"
}

success() {
    local message="$(echo "of $1 $([ "$2" = "file" ] && echo "to $DESTINATION")")"
    notify-send "Ashot" "Make screenshot $message"
    echo "Ashot make screenshot $message "
}


error() {
    notify-send "Ashot" "Couldn't"
    echo "Ashot couldn't!"
    exit 1
}

case "$1" in
    "all")
        ARGUMENTS=""
        ;;
    "workspace")
        ARGUMENTS="-o \"$(get_workspace)\"" || error
        ;;
    "client")
        ARGUMENTS="-g \"$(get_client)\"" || error
        ;;
    "area")
        ARGUMENTS="-g \"$(get_area)\"" || error
        ;;
    "custom") 
        shift
        echo "Run grim $@"
        grim "$@"
        exit 0
        ;;
    *)
        usage
        ;;
esac

case "$2" in
    "file")
        EXTRA="$DESTINATION"
        ;;
    *)
        ;;
esac

eval $(construct "$ARGUMENTS" "$EXTRA") && success "$1" "$2" || error

